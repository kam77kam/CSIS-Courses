package movieConnect;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

import edu.princeton.cs.algs4.Graph;
import edu.princeton.cs.algs4.SymbolGraph;

/**
 * Represents a frame for managing and displaying friends and their movie
 * connections. This frame allows users to add new friends, find movie
 * connections, and navigate back to the main page.
 * 
 * @author Kamdon Bird, Haiyang Liu
 * @version 1.0
 */
@SuppressWarnings("serial")
public class FriendsPageJFrame extends JFrame {

	private JComboBox<String> friendDropdown;
	private JTextField newFriendTextField;
	private JTextArea resultTextArea;
	private User activeUser;

	public static String dataBaseMovieListTxtFile = "src/movieConnect/Resources/Files/GraphMovieList.txt";

	/**
	 * Custom panel class with a background image. This panel displays a chosen
	 * image as its background.
	 */
	class BackgroundPanel extends JPanel {
		private Image backgroundImage;

		/**
		 * Constructs a BackgroundPanel with a specified image path.
		 *
		 * @param imagePath The path to the image file to be used as the background.
		 */
		public BackgroundPanel(String imagePath) {
			backgroundImage = new ImageIcon(imagePath).getImage();
		}

		@Override
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			g.drawImage(backgroundImage, 0, 0, this.getWidth(), this.getHeight(), this);
		}
	}

	/**
	 * Constructs a FriendsPageJFrame for a given user. Initializes the frame,
	 * creates components, and adds them to the frame.
	 *
	 * @param user The active user for whom the frame is being created.
	 */
	public FriendsPageJFrame(User user) {
		activeUser = user;
		initializeFrame();
		createComponents();
		addComponents();
	}

	/**
	 * Initializes the frame with basic settings such as title, size, close
	 * operation, and location. It also sets the background image for the frame.
	 */
	private void initializeFrame() {
		setTitle("Find Your Movie Suggestion");
		setSize(1000, 700);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLocationRelativeTo(null);
		setContentPane(new BackgroundPanel("src/movieConnect/Resources/Images/fbg.png"));
	}

	/**
	 * Creates the components used in the frame, including dropdowns and text
	 * fields. Initializes the dropdown with predefined friend names and sets up the
	 * text field for new friends.
	 */
	private void createComponents() {
		friendDropdown = new JComboBox<>(getUsersFriends());
		newFriendTextField = new JTextField(15);
	}

	/**
	 * Adds the created components to the frame. Organizes the components into top
	 * and bottom panels and adds them to the frame using a BorderLayout.
	 */
	private void addComponents() {
		setLayout(new BorderLayout());

		JPanel topPanel = new JPanel(new BorderLayout());
		JPanel bottomPanel = new JPanel(new BorderLayout());

		topPanel.add(createBackButton(), BorderLayout.WEST);
		topPanel.add(createCenterPanel(), BorderLayout.CENTER);
		topPanel.add(createRightPanel(), BorderLayout.EAST);

		bottomPanel.add(createResultTextArea());

		add(topPanel, BorderLayout.NORTH);
		add(bottomPanel, BorderLayout.SOUTH);
	}

	/**
	 * Creates and returns a 'Back' button with an attached action listener to go
	 * back to the previous page.
	 *
	 * @return JButton The back button.
	 */
	private JButton createBackButton() {
		JButton backButton = new JButton("Back");
		backButton.addActionListener(e -> goBack());
		return backButton;
	}

	/**
	 * Creates and returns a 'Movie Connect' button with an attached action listener
	 * to find movie connections.
	 *
	 * @return JButton The Movie Connect button.
	 */
	private JButton createMovieConnectButton() {
		JButton movieConnectButton = new JButton("Movie Connect");
		movieConnectButton.addActionListener(e -> findMovieConnection());
		return movieConnectButton;
	}

	/**
	 * Creates and returns an 'Add Friend' button with an attached action listener
	 * to add a new friend.
	 *
	 * @return JButton The Add Friend button.
	 */
	private JButton createAddFriendButton() {
		JButton addFriendButton = new JButton("Add Friend");
		addFriendButton.addActionListener(e -> addFriend());
		return addFriendButton;
	}

	/**
	 * Creates and returns a text area for displaying results. The text area is
	 * non-editable and used to show the output of various actions like finding
	 * movie connections.
	 *
	 * @return JTextArea The text area for displaying results.
	 */
	private JTextArea createResultTextArea() {
		resultTextArea = new JTextArea(10, 30);
		resultTextArea.setEditable(false);
		return resultTextArea;
	}

	/**
	 * Creates and returns a panel with a centered layout. Adds the friend dropdown
	 * and the Movie Connect button to this panel.
	 *
	 * @return JPanel The center panel containing the dropdown and button.
	 */
	private JPanel createCenterPanel() {
		JPanel centerPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		centerPanel.add(friendDropdown);
		centerPanel.add(createMovieConnectButton());
		return centerPanel;
	}

	/**
	 * Creates and returns a panel with a right-aligned layout. Adds the new friend
	 * text field and the Add Friend button to this panel.
	 *
	 * @return JPanel The right panel containing the text field and button.
	 */
	private JPanel createRightPanel() {
		JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		rightPanel.add(newFriendTextField);
		rightPanel.add(createAddFriendButton());
		return rightPanel;
	}

	/**
	 * Handles the action of the 'Back' button. Opens the MainPageJFrame and
	 * disposes of the current frame.
	 */
	private void goBack() {
		System.out.println("Back Button Clicked");
		MainPageJFrame mainPage = new MainPageJFrame(activeUser);
		mainPage.setVisible(true);
		dispose();
	}

	/**
	 * Finds and displays the movie connections between the active user and a
	 * selected friend. It searches for common movies and displays them in the
	 * result text area.
	 */
	private void findMovieConnection() {
		System.out.println("Movie Connect Button Clicked");
		String dataBaseMovieList = dataBaseMovieListTxtFile;
		String delimiter = "\" \"";
		SymbolGraph sg = new SymbolGraph(dataBaseMovieList, delimiter);
		Graph graph = sg.graph();

		String yourUserName = activeUser.getUsername();
		String otherUserName = (String) friendDropdown.getSelectedItem();
		
		resultTextArea.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
		
		if (sg.contains(yourUserName) && sg.contains(otherUserName)) {
			int yourUserIndex = sg.indexOf(yourUserName);
			int otherUserIndex = sg.indexOf(otherUserName);

			Iterable<Integer> yourUserNameMovies = graph.adj(yourUserIndex);
			Iterable<Integer> otherUserNameMovies = graph.adj(otherUserIndex);

			Set<Integer> movieSets = new HashSet<>();
			for (int movieNum : otherUserNameMovies) {
				movieSets.add(movieNum);
			}

			StringBuilder commonMovies = new StringBuilder();

			for (int movieNum : yourUserNameMovies) {
				if (movieSets.contains(movieNum)) {
					commonMovies.append(sg.nameOf(movieNum)).append("\n");
				}
			}
			
			if (commonMovies.length() > 0) {
				resultTextArea.setText("All movies you have in common with " + otherUserName + ":\n"
						+ commonMovies.toString());
			} else {
				resultTextArea.setText("No common movies found with " + otherUserName + ".");
			}
		} else {
			resultTextArea.setText("Your user or the specified user could not be found.");
		}
	}

	/**
	 * Retrieves the list of friends for the active user. Reads the friend names
	 * from a file specific to the active user and returns them as an array of
	 * strings.
	 *
	 * @return String[] An array containing the names of friends for the active
	 *         user.
	 */
	private String[] getUsersFriends() {
		String fileName = "src/movieConnect/Resources/Files/" + activeUser.getUsername() + " Friends.txt";
		List<String> linesList = new ArrayList<>();

		try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
			String line;
	        while ((line = br.readLine()) != null) {
	            linesList.add(line);
	        }
		} catch (IOException e) {
			e.printStackTrace();
		}

		return linesList.toArray(new String[0]);
	}

	/**
	 * Adds a new friend to the dropdown list. Checks if the entered friend name is
	 * not empty and not already in the list, then adds it.
	 */
	private void addFriend() {
		System.out.println("'Add Friend' button was clicked");
		String newFriend = newFriendTextField.getText().trim();
		System.out.println("Name" + newFriend);
		if (newFriend.isEmpty() || newFriend.length() <= 8) {
			System.out.println("Prompted user to 'Enter Valid Name'");
			JOptionPane.showMessageDialog(this, "Enter Valid Name");
		} else {
			System.out.println("Searching '" + newFriend + "' in Friends List");
			String filename = MainPageJFrame.filesToPath + activeUser.getUsername() + " Friends.txt";
			try {
				FileReader fileReader = new FileReader(filename);
				BufferedReader bufferedReader = new BufferedReader(fileReader);
				String search;
				boolean foundFriend = false;
				while ((search = bufferedReader.readLine()) != null) {
					if (search.contains(newFriend)) {
						System.out.println("Prompted user 'Friend Already Added'");
						foundFriend = true;
						JOptionPane.showMessageDialog(this, "Friend Already Added");
						break;
					}
				}
				bufferedReader.close();
				if (!foundFriend) {
					try {
						BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true));
						
						if(JOptionPane.showConfirmDialog(this, "Do you want to add " + newFriend) == 0) {
							System.out.println("Prompted user '" + newFriend + " added'");
							writer.write("\n" + newFriend);
							friendDropdown.addItem(newFriend);
							newFriendTextField.setText("");
							
						}else {
							System.out.println("Prompted user '" + newFriend + " was NOT added'");
						}
						writer.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(() -> {
			FriendsPageJFrame friendsPage = new FriendsPageJFrame(new User("Kamdon Bird", "56789"));
			friendsPage.setVisible(true);
		});
	}
}
