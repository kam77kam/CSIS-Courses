/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphShortestPath;

import edu.princeton.cs.algs4.DirectedEdge;
import edu.princeton.cs.algs4.Edge;
import edu.princeton.cs.algs4.EdgeWeightedGraph;
import edu.princeton.cs.algs4.PrimMST;
import edu.princeton.cs.algs4.ST;

/**
 *
 * @author Darren
 */
public class EdgeWeightedSymbolGraph {

    private ST<String, Integer> st;  // string -> index
    private String[] keys;           // index  -> string
    private EdgeWeightedGraph graph;             // the underlying graph

    /**
     * Initializes a graph from a file using the specified delimiter. Each line
     * in the file contains the name of a vertex, followed by a list of the
     * names of the vertices adjacent to that vertex, separated by the
     * delimiter.
     *
     * @param filename the name of the file
     * @param delimiter the delimiter between fields
     */
    public EdgeWeightedSymbolGraph(String filename, String delimiter) {
        st = new ST<String, Integer>();
        // First pass builds the index by reading strings to associate
        // distinct strings with an index
        In in = new In(filename);
        try {
            String line = "";
            while ((line = in.readLine()) != null) {
                String[] a = line.split(delimiter);
                for (int i = 0; i < a.length - 1; i++) {
                    if (!st.contains(a[i])) {
                        st.put(a[i], st.size());
                    }
                }
            }
            System.out.print(st.size());
            // inverted index to get string keys in an array
            keys = new String[st.size()];
            for (String name : st.keys()) {
                keys[st.get(name)] = name;
            }

            // second pass builds the graph by connecting first vertex on each
            // line to all others
            graph = new EdgeWeightedGraph(st.size());
            in = new In(filename);
            while (!in.isEmpty()) {
                String[] a = in.readLine().split(delimiter);
                int v = st.get(a[0]);
                int w = st.get(a[1]);
                double weight = in.readDouble();
                Edge e = new Edge(v, w, weight);
                graph.addEdge(e);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Exception e) {
                    // Ignore issues during closing 
                }
            }
        }
    }

    /**
     * Does the graph contain the vertex named {@code s}?
     *
     * @param s the name of a vertex
     * @return {@code true} if {@code s} is the name of a vertex, and
     * {@code false} otherwise
     */
    public boolean contains(String s) {
        return st.contains(s);
    }

    /**
     * Returns the integer associated with the vertex named {@code s}.
     *
     * @param s the name of a vertex
     * @return the integer (between 0 and <em>V</em> - 1) associated with the
     * vertex named {@code s}
     * @deprecated Replaced by {@link #indexOf(String)}.
     */
    @Deprecated
    public int index(String s) {
        return st.get(s);
    }

    /**
     * Returns the integer associated with the vertex named {@code s}.
     *
     * @param s the name of a vertex
     * @return the integer (between 0 and <em>V</em> - 1) associated with the
     * vertex named {@code s}
     */
    public int indexOf(String s) {
        return st.get(s);
    }

    /**
     * Returns the name of the vertex associated with the integer {@code v}.
     *
     * @param v the integer corresponding to a vertex (between 0 and <em>V</em>
     * - 1)
     * @return the name of the vertex associated with the integer {@code v}
     * @throws IllegalArgumentException unless {@code 0 <= v < V}
     * @deprecated Replaced by {@link #nameOf(int)}.
     */
    @Deprecated
    public String name(int v) {
        validateVertex(v);
        return keys[v];
    }

    /**
     * Returns the name of the vertex associated with the integer {@code v}.
     *
     * @param v the integer corresponding to a vertex (between 0 and <em>V</em>
     * - 1)
     * @throws IllegalArgumentException unless {@code 0 <= v < V}
     * @return the name of the vertex associated with the integer {@code v}
     */
    public String nameOf(int v) {
        validateVertex(v);
        return keys[v];
    }

    /**
     * Returns the graph assoicated with the symbol graph. It is the client's
     * responsibility not to mutate the graph.
     *
     * @return the graph associated with the symbol graph
     * @deprecated Replaced by {@link #graph()}.
     */
    @Deprecated
    public EdgeWeightedGraph G() {
        return graph;
    }

    /**
     * Returns the graph assoicated with the symbol graph. It is the client's
     * responsibility not to mutate the graph.
     *
     * @return the graph associated with the symbol graph
     */
    public EdgeWeightedGraph graph() {
        return graph;
    }

    // throw an IllegalArgumentException unless {@code 0 <= v < V}
    private void validateVertex(int v) {
        int V = graph.V();
        if (v < 0 || v >= V) {
            throw new IllegalArgumentException("vertex " + v + " is not between 0 and " + (V - 1));
        }
    }

    /**
     * Unit tests the {@code SymbolGraph} data type.
     *
     * @param args the command-line arguments
     */
    public static void main(String[] args) {
        String filename = "CityConnections.csv";
        String delimiter = " ";
        EdgeWeightedSymbolGraph sg = new EdgeWeightedSymbolGraph(filename, delimiter);
        EdgeWeightedGraph graph = sg.graph();
        PrimMST mst = new PrimMST(graph);

    }
}
