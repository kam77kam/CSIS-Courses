package movieConnect;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

public class StartPageJFrame extends JFrame implements MouseListener {

	static ArrayList<User> allUsers = new ArrayList<>();

    static {
        // Load users from the text file
        loadUsersFromFile("UserList.txt");
    }


    JButton login = new JButton();
    JButton exit = new JButton();

    JTextField username = new JTextField();
    //JTextField password = new JTextField();
    JPasswordField password = new JPasswordField();
    JTextField code = new JTextField();

    //Correct verify code
    JLabel rightCode = new JLabel();


    public StartPageJFrame() {
        //Initialize the page
        initJFrame();

        //Add content to this page
        initView();

        //Make the current screen visible
        this.setVisible(true);
    }

    private static void loadUsersFromFile(String filePath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Split the line into username and password
                String[] userData = line.split(",");
                // Remove quotes from the username and password
                String username = userData[0].replace("\"", "");
                String password = userData[1].replace("\"", "");
                // Create a User object and add it to the list
                allUsers.add(new User(username, password));
            }
        } catch (IOException e) {
            e.printStackTrace();
            // Handle the exception (e.g., show an error message)
            JOptionPane.showMessageDialog(null, "Error reading user data from file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

	public void initView() {
        //1. Add user name text
        JLabel usernameText = new JLabel(new ImageIcon("src/movieConnect/Resources/image/username.png"));
        usernameText.setBounds(116, 125, 45, 45);
        this.getContentPane().add(usernameText);

        //2.Add a user name input field

        username.setBounds(195, 134, 200, 30);
        this.getContentPane().add(username);

        //3.Add password text
        JLabel passwordText = new JLabel(new ImageIcon("src/movieConnect/Resources/image/password.png"));
        passwordText.setBounds(116, 185, 47, 47);
        this.getContentPane().add(passwordText);

        //4.Password entry field
        password.setBounds(195, 195, 200, 30);
        this.getContentPane().add(password);


        //Verification code
        JLabel codeText = new JLabel(new ImageIcon("src/movieConnect/Resources/image/verifycode.png"));
        codeText.setBounds(114, 245, 50, 50);
        this.getContentPane().add(codeText);

        //Verification code input field
        code.setBounds(195, 256, 100, 30);
        this.getContentPane().add(code);


        String codeStr = CodeUtil.getCode();
        //Set content
        rightCode.setText(codeStr);
        //Bind mouse event
        rightCode.addMouseListener(this);
        //Location and width and height
        rightCode.setBounds(300, 256, 50, 30);
        //Add to interface
        this.getContentPane().add(rightCode);

        //5. Add login button	
        login.setBounds(100, 310, 127, 45);
        login.setIcon(new ImageIcon("src/movieConnect/Resources/image/login.png"));
        //Remove the button border
        login.setBorderPainted(false);
        //Remove the button background
        login.setContentAreaFilled(false);
        //Bind mouse events to the login button
        login.addMouseListener(this);
        this.getContentPane().add(login);

        //6.Add registration button
        exit.setBounds(265, 310, 110, 45);
        exit.setIcon(new ImageIcon("src/movieConnect/Resources/image/exit.png"));
        //Remove the button border
        exit.setBorderPainted(false);
        //Remove the button background
        exit.setContentAreaFilled(false);
        //Bind mouse events to the registration button
        exit.addMouseListener(this);
        this.getContentPane().add(exit);


        //7.Add background image
        JLabel background = new JLabel(new ImageIcon("src/movieConnect/Resources/image/background3.jpg"));
        background.setBounds(0, 0, 490, 405);
        this.getContentPane().add(background);

    }


    public void initJFrame() {
        this.setSize(488, 430);
        this.setTitle("Movie Connect V1.0 Login");
        this.setDefaultCloseOperation(3);
        this.setLocationRelativeTo(null);
        this.setAlwaysOnTop(true);
        this.setLayout(null);
    }




    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getSource() == login) {
            System.out.println("Login Button Clicked");
            //Gets the contents of two text input fields
            String usernameInput = username.getText();
            String passwordInput = password.getText();
            //Gets the verification code entered by the user
            String codeInput = code.getText();

            //Create a User object
            User userInfo = new User(usernameInput, passwordInput);
            System.out.println("The entered user name is" + usernameInput);
            System.out.println("The entered password is" + passwordInput);

            if (codeInput.length() == 0) {
                showJDialog("The verification code cannot be empty");
            } else if (usernameInput.length() == 0 || passwordInput.length() == 0) {
                //Verify that the user name and password are empty
                System.out.println("The user name or password is empty");

                //Call the showJDialog method and show the pop-up
                showJDialog("	The user name or password is empty.");


            } else if (!codeInput.equalsIgnoreCase(rightCode.getText())) {
                showJDialog("      Wrong Verificaiton Code.");
            } else if (contains(userInfo)) {
                System.out.println("The User name and Password are correct");
                //Close the current login page
                this.setVisible(false);
                //Open the main screen of the game
                //The user name currently logged in needs to be passed to the game interface
                new MainPageJFrame();
            } else {
                System.out.println("	The user name or password is incorrect.");
                showJDialog("	The user name or password is incorrect.");
            }
        } else if (e.getSource() == exit) {
            System.out.println("Exit button was clicked");
			System.exit(0); // Exit the application
        } else if (e.getSource() == rightCode) {
            System.out.println("Change verification code");
            //Get a new capTCHA
            String code = CodeUtil.getCode();
            rightCode.setText(code);
        }
    }


    public void showJDialog(String content) {
        //Create a pop-up object
        JDialog jDialog = new JDialog();
        //Set the size of the pop-up
        jDialog.setSize(250, 200);
        //Let the frame be placed on top
        jDialog.setAlwaysOnTop(true);
        //Center the frame
        jDialog.setLocationRelativeTo(null);
        //You will never be able to operate the following interface if the box is not closed
        jDialog.setModal(true);

        //Create a Jlabel object to manage the text and add it to the pop-up
        JLabel warning = new JLabel(content);
        warning.setBounds(0, 0, 200, 150);
        jDialog.getContentPane().add(warning);

        //Let the pop-up show
        jDialog.setVisible(true);
    }


    @Override
    public void mousePressed(MouseEvent e) {
        if (e.getSource() == login) {
            login.setIcon(new ImageIcon("src/movieConnect/Resources/image/loginclick.png"));
        } else if (e.getSource() == exit) {
            exit.setIcon(new ImageIcon("src/movieConnect/Resources/image/exitpress.png"));
        }
    }



    @Override
    public void mouseReleased(MouseEvent e) {
        if (e.getSource() == login) {
            login.setIcon(new ImageIcon("src/movieConnect/Resources/image/login.png"));
        } else if (e.getSource() == exit) {
            exit.setIcon(new ImageIcon("src/movieConnect/Resources/image/exit.png"));
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    //Determines whether the user exists in the collection
    public boolean contains(User userInput){
        for (int i = 0; i < allUsers.size(); i++) {
            User rightUser = allUsers.get(i);
            if(userInput.getUsername().equals(rightUser.getUsername()) && userInput.getPassword().equals(rightUser.getPassword())){
                //If the same representation exists, return true, and there is no need to compare the following
                return true;
            }
        }
        //If it is not found at the end of the loop, it does not exist
        return false;
    }


}
