package movieConnect;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;

/**
 * Represents the main frame of the Movie Connect application.
 * This frame allows users to interact with the movie recommendation system
 * by liking or disliking movies and accessing additional functionalities.
 * It displays movie posters and provides options to navigate to the FriendsPage
 * and view liked movies.
 *
 * @author Kamdon Bird, Haiyang Liu
 * @version 1.0
 */
@SuppressWarnings("serial")
public class MainPageJFrame extends JFrame implements KeyListener, ActionListener, MouseListener {

	private User activeUser;

	private JMenu functionJMenu = new JMenu("Function");
	private JMenu aboutJMenu = new JMenu("About us");

	private JMenuItem reFresh = new JMenuItem("Refresh");
	private JMenuItem reLoginItem = new JMenuItem("Sign Out");
	private JMenuItem closeItem = new JMenuItem("Close the App");
	private JMenuItem accountItem = new JMenuItem("App Creator");

	private JButton dislikeButton = new JButton("Dislike");
	private JButton likeButton = new JButton("Like");
	private JButton showLikedMoviesButton = new JButton("Show Liked Movies");

	private HashSet<String> remainingMovies = new HashSet<>();
	private HashSet<String> shownMovies = new HashSet<>();
	private Set<String> likedMovies = new HashSet<>(); // Container for liked movies
	private String currentMovie; // To keep track of the current displayed movie
	private String[] moviesArr = { "Avatar", "Barbie", "Coco", "Forrest Gump", "John Wick 4", "Mission Impossible",
			"Oppenheimer", "Parasite", "Spider Man", "The Avengers", "The Dark Knight", "Shawshank Redemption",
			"Titanic", "Interstellar", "Leon", "Inception", "Trueman", "3 Idiots", "Walle", "Zootopia", "Godfather",
			"Pursuit", "The Matrix", "Gladiator", "Jurassic Park", "Braveheart", "The Lord of the Rings", "Star Wars" };
	private JLabel jLabel;
	public final static String filesToPath = "movieConnect/Resources/Files/";
	private final String shownMoviesFilePath = filesToPath + "shownMovies.txt";

	
	/**
     * Constructs a MainPageJFrame for a given user.
     *
     * @param user The active user for whom the frame is being created.
     */
	public MainPageJFrame(User user) {
		activeUser = user;
		initJFrame();
		initJMenuBar();
		initData();
		initImage();
		addButtons();

		loadShownMovies();
		remainingMovies.addAll(Arrays.asList(moviesArr));
		remainingMovies.removeAll(shownMovies);

		generateRandomMovie();
		Runtime.getRuntime().addShutdownHook(new Thread(() -> {
			clearShownMoviesFile();
		}));
		this.setSize(600, 800);
		this.setVisible(true);
	}

	/**
     * Loads the list of shown movies from the file and populates the 'shownMovies' set.
     * If the file exists, it reads each line and adds the movie to the 'shownMovies' set.
     * This method is called during the initialization of the MainPageJFrame to restore
     * the state of shown movies from the previous sessions.
     */
	private void loadShownMovies() {
		try {
			File file = new File(shownMoviesFilePath);
			if (file.exists()) {
				BufferedReader reader = new BufferedReader(new FileReader(file));
				String line;
				while ((line = reader.readLine()) != null) {
					shownMovies.add(line.trim());
				}
				reader.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
     * Saves the given movie to the file containing the list of shown movies.
     * The movie is written to the file, followed by a new line.
     *
     * @param movie The movie to be saved to the file.
     */
	private void saveShownMovie(String movie) {
		try {
			BufferedWriter writer = new BufferedWriter(new FileWriter(shownMoviesFilePath, true));
			writer.write(movie);
			writer.newLine();
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
     * Clears the file containing the list of shown movies.
     */
	private void clearShownMoviesFile() {
		try {
			new FileWriter(shownMoviesFilePath, false).close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
     * Adds buttons to the frame, including the "Friends," "Dislike," "Like,"
     * and "Show Liked Movies" buttons.
     */
	private void addButtons() {
		// Button at the top right
		JButton topRightButton = new JButton("Friends");
		topRightButton.setBounds(getWidth() - 110, 10, 100, 30);
		topRightButton.addActionListener(this);
		getContentPane().add(topRightButton);

		// Button at the bottom left
		dislikeButton.setBounds(75, getHeight() - 60, 106, 106);
		dislikeButton.setIcon(new ImageIcon("movieConnect/Resources/Images/dislike.png"));
		dislikeButton.setBorderPainted(false);
		dislikeButton.setContentAreaFilled(false);
		dislikeButton.addMouseListener(this);
		this.getContentPane().add(dislikeButton);

		// Button at the bottom right
		likeButton.setBounds(440, getHeight() - 60, 106, 106);
		likeButton.setIcon(new ImageIcon("movieConnect/Resources/Images/like.png"));
		likeButton.setBorderPainted(false);
		likeButton.setContentAreaFilled(false);
		likeButton.addMouseListener(this);
		this.getContentPane().add(likeButton);
		showLikedMoviesButton.setBounds(10, 10, 200, 30);
		showLikedMoviesButton.addActionListener(new ActionListener() {
			/**
		     * Handles the actions triggered by various components such as buttons and menu items.
		     *
		     * @param e The ActionEvent representing the action performed.
		     */
			@Override
			public void actionPerformed(ActionEvent e) {
				printLikedMovies();
			}
		});
		getContentPane().add(showLikedMoviesButton);
	}

	/**
     * Initializes data, shuffles the array of movies.
     */
	private void initData() {
		Random r = new Random();
		for (int i = 0; i < moviesArr.length; i++) {
			int index = r.nextInt(moviesArr.length);
			String temp = moviesArr[i];
			moviesArr[i] = moviesArr[index];
			moviesArr[index] = temp;

		}
	}

	/**
     * Generates a random movie from the remainingMovies set and displays it on the frame.
     * If all movies have been shown, prints a message indicating that all movies have been shown.
     */
	private void generateRandomMovie() {
		if (remainingMovies.isEmpty()) {
			System.out.println("All movies have been shown.");
			return;
		}
		Random r = new Random();
		List<String> list = new ArrayList<>(remainingMovies);
		int index = r.nextInt(list.size());
		String randomMovie = list.get(index);
		currentMovie = randomMovie;
		remainingMovies.remove(randomMovie);
		shownMovies.add(randomMovie);
		saveShownMovie(randomMovie);

		String imagePath = "movieConnect/Resources/Images/" + randomMovie + ".jpg";
		ImageIcon icon = new ImageIcon(imagePath);
		if (jLabel != null) {
			getContentPane().remove(jLabel);
		}
		jLabel = new JLabel(icon);
		jLabel.setBounds(50, 50, 500, 550);
		getContentPane().add(jLabel, 0);
		getContentPane().repaint();
		getContentPane().revalidate();
	}

	/**
     * Initializes the image display on the frame by loading a random movie image.
     * The random movie is selected from the moviesArr array.
     * If there is already a displayed movie (jLabel is not null), it is removed before adding the new one.
     */
	private void initImage() {
		Random r = new Random();
		String randomMovie = moviesArr[r.nextInt(moviesArr.length)];
		String imagePath = "movieConnect/Resources/Images/" + randomMovie + ".jpg";
		// Load the image
		ImageIcon icon = new ImageIcon(imagePath);
		if (jLabel != null) {
			getContentPane().remove(jLabel);
		}
		jLabel = new JLabel(icon);
		jLabel.setBounds(50, 50, 500, 550);
		getContentPane().add(jLabel, 0);
		getContentPane().repaint();
		getContentPane().revalidate();

		JLabel background = new JLabel(new ImageIcon("movieConnect/Resources/Images/background5.jpg"));
		background.setBounds(0, -25, 603, 680);
		this.getContentPane().add(background);

	}
	/**
     * Initializes the Java Menu Bar for the main frame.
     * It creates two menus, 'Function' and 'About us', along with their respective items.
     * Action listeners are attached to each menu item to perform specific actions when clicked.
     */
	private void initJMenuBar() {
		JMenuBar jMenuBar = new JMenuBar();
		// Add items to the JMenu
		functionJMenu.add(reFresh);
		functionJMenu.add(reLoginItem);
		functionJMenu.add(closeItem);
		aboutJMenu.add(accountItem);
		// Bind an event to an entry
		reFresh.addActionListener(this);
		reLoginItem.addActionListener(this);
		closeItem.addActionListener(this);
		accountItem.addActionListener(this);
		// Add JMenu two items to the JMuneBar
		jMenuBar.add(functionJMenu);
		jMenuBar.add(aboutJMenu);
		this.setJMenuBar(jMenuBar);
	}

	/**
     * Initializes the JFrame settings such as size, title, location, and layout.
     */
	private void initJFrame() {
		this.setSize(603, 680);
		this.setTitle("Movie Connect v1.0");
		this.setAlwaysOnTop(true);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		this.setLayout(null);
	}

	/**
     * Shows a dialog with the list of liked movies.
     */
	private void printLikedMovies() {
		System.out.println("Liked Movies:");
		JDialog jDialog = new JDialog();
        jDialog.setSize(300, 300);
        jDialog.setTitle("Liked Movies");
        jDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jDialog.setLocationRelativeTo(null);
        
        JTextArea textArea = new JTextArea();
        textArea.setEditable(false);
        
		for (String movie : likedMovies) {
			textArea.append(movie + "\n");
			System.out.println(movie);
		}
		jDialog.add(new JScrollPane(textArea));
		jDialog.setAlwaysOnTop(true);
		jDialog.setVisible(true);
		
	}

	/**
     * Responds to various action events triggered by buttons and menu items.
     * Handles different actions based on the source of the event.
     *
     * @param e The ActionEvent object representing the event.
     */
	@Override
	public void actionPerformed(ActionEvent e) {
		Object obj = e.getSource();
		// Check if the clicked item is a JButton
		if (obj instanceof JButton) {
			JButton clickedButton = (JButton) obj;
			System.out.println(clickedButton);
			String buttonText = clickedButton.getText();
			System.out.println("Button Clicked: " + buttonText);
			if (buttonText == "Friends") {
				this.setVisible(false);
				new FriendsPageJFrame(activeUser).setVisible(true);
			}
		}
		// Check which JMenuItem was clicked
		if (obj == reFresh) {
			// If the Refresh JMenuItem was clicked
			System.out.println("Refresh");
			initImage();
		} else if (obj == reLoginItem) {
			// If the Sign Out JMenuItem was clicked
			System.out.println("Sign Out");
			this.setVisible(false);
			new StartPageJFrame();
		} else if (obj == closeItem) {
			// If the Close the App JMenuItem was clicked
			System.out.println("Close the App");
			System.exit(0);
		} else if (obj == accountItem) {
			// If the App Creators JMenuItem was clicked
			System.out.println("App Creators");
			JDialog jDialog = new JDialog();
			JLabel jLabel = new JLabel(new ImageIcon("src/movieConnect/Resources/Images/about.png"));
			jLabel.setBounds(0, 0, 500, 500);
			jDialog.getContentPane().add(jLabel);
			jDialog.setSize(496, 409);
			jDialog.setAlwaysOnTop(true);
			jDialog.setLocationRelativeTo(null);
			jDialog.setModal(true);
			jDialog.setVisible(true);
		}
	}
	
	/**
     * {@inheritDoc}
     */
	@Override
	public void keyTyped(KeyEvent e) {}
	
	/**
     * {@inheritDoc}
     */
	@Override
	public void keyPressed(KeyEvent e) {}
	
	/**
     * {@inheritDoc}
     */
	@Override
	public void keyReleased(KeyEvent e) {}
	
	/**
     * {@inheritDoc}
     */
	@Override
	public void mouseClicked(MouseEvent e) {
		if (e.getSource() == dislikeButton) {
			System.out.println("Dislike it.");
			generateRandomMovie();
		}
		if (e.getSource() == likeButton) {
			System.out.println("Like it!");

			addMovieToFile();
			likedMovies.add(currentMovie);
			generateRandomMovie();
		}
	}

	/**
     * Adds the current movie to the user's movie list file.
     * Checks if the file exists, creates one if not, and appends the movie.
     */
	private void addMovieToFile() {
		String filename = filesToPath + "GraphMovieList.txt";
		userMovieListTxtExists(filename);
		try {
			FileReader fileReader = new FileReader(filename);
			try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {
				if (bufferedReader.readLine() == null) {
					BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
					writer.write(activeUser.getUsername() + " \" \"" + currentMovie);
					writer.close();
					System.out.println("bufferedReader was empty, " + currentMovie
							+ " has been appended to the file successfully.");
				} else {
					try {
						BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true));
						writer.write("\n" + activeUser.getUsername() + "\" \"" + currentMovie);
						writer.close();
						System.out.println(currentMovie + " has been appended to the file successfully.");
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	/**
     * Checks whether the user's movie list file exists.
     *
     * @param filename The path of the user's movie list file.
     * @return {@code true} if the file exists, {@code false} otherwise.
     */
	private boolean userMovieListTxtExists(String filename) {
		File file = new File(filename);
		boolean result = false;
		try {
			if (file.exists()) {
				System.out.println(activeUser.getUsername() + " Movie List already exists");
				result = true;
			} else if (file.createNewFile()) {
				System.out.println("File for " + activeUser.getUsername() + " is now create");
				result = true;
			} else {
				System.out.println("Failed to create the file");
				result = false;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	/**
     * {@inheritDoc}
     */
	@Override
	public void mousePressed(MouseEvent e) {
		if (e.getSource() == dislikeButton) {
			dislikeButton.setIcon(new ImageIcon("src/movieConnect/Resources/Images/dislikepress.png"));
		} else if (e.getSource() == likeButton) {
			likeButton.setIcon(new ImageIcon("src/movieConnect/Resources/Images/likepress.png"));
		}

	}
	
	/**
     * {@inheritDoc}
     */
	@Override
	public void mouseReleased(MouseEvent e) {
		if (e.getSource() == dislikeButton) {
			dislikeButton.setIcon(new ImageIcon("src/movieConnect/Resources/Images/dislike.png"));
		} else if (e.getSource() == likeButton) {
			likeButton.setIcon(new ImageIcon("src/movieConnect/Resources/Images/like.png"));
		}

	}
	
	/**
     * {@inheritDoc}
     */
	@Override
	public void mouseEntered(MouseEvent e) {}
	
	/**
     * {@inheritDoc}
     */
	@Override
	public void mouseExited(MouseEvent e) {}
}