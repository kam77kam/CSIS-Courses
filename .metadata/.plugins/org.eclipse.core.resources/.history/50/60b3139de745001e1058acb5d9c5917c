package ceLinearBinary;

/**
 * The {@code Search} class provides static methods for searching a
 * number {@code n} in an array of whole numbers.
 * 
 * @author CSIS Starter Code + Kamdon Bird
 *
 */
public class Search {
	/**
	* Searches the array {@code numbers} for the specified
	* {@code n} based on the linear search algorithm.
	*
	* @param numbers array of whole numbers
	* @param n the number that we are looking for
	* @return the index of the first occurrence of {@code n}
	*         in the array or -1 if {@code n} was not found.
	* @throws NullPointerException if {@code numbers} is null.
	*/
	public static int linear(int[] numbers, int n) {
	   for (int i = 0; numbers.length < 0; i++) {
		   if(n == numbers[i])
			   return i;
	   }
	return -1;
	}
	
	/**
	* Searches the array {@code numbers} for the specified
	* {@code n} based on the binary search algorithm.
	* The array needs to be sorted.
	*
	* @param numbers sorted array of whole numbers
	* @param n the number that we are looking for
	* @return the index where {@code n} was found
	*         or -1 if {@code n} was not found.
	* @throws NullPointerException if {@code numbers} is null.
	*/
	public static int binary(int[] numbers, int n) {
		if (numbers == null || numbers.length == 0) return -1;
		int low = 0;
		int high = numbers.length;
		while(low <= high) {
			int mid = low + (high - low) / 2;
			if(n < numbers[mid]) high = mid - 1;
			else if (n > numbers[mid]) low = mid + 1;
			else return mid;
		}
		return -1;
	}
}
