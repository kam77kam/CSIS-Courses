package ceHeapSort;

import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.MaxPQ;

/**
 * The DemoHeap class showcases the underlying idea of heapsort. It does not
 * implement the full heapsort algorithm but provides insight into its
 * fundamental concepts.
 * 
 * The steps demonstrated in this class: 1. Efficiently convert the array into a
 * binary heap by heapifying the array 2. Repeatedly extract elements from the
 * heap, printing them one at a time, to obtain the desired sorted order.
 *
 * @author CSIS + Kamdon Bird
 */
public class DemoHeap {

	public static void main(String[] args) {
		// Create an array of 25 random Mail objects and print it.
		StdOut.println("Random Mail:");
		StdOut.println("------------");
		Mail[] mailArray = new Mail[25];
		for (int i = 0; i < 25; i++) {
			Mail m = new Mail();
			mailArray[i] = m;
			StdOut.println(m.toString());
		}
		StdOut.println();
		// List the mail from most urgent to least urgent in linear time.
		StdOut.println("Ordered Mail:");
		StdOut.println("-------------");
		// Create a max priority queue and add mail items to it
        MaxPQ<Mail> maxPQ = new MaxPQ<>(mailArray);
        
        // Dequeue and print the mail items in priority order
        while (!maxPQ.isEmpty()) {
            Mail m = maxPQ.delMax();
            StdOut.println(m.toString());
        }
	}
}
